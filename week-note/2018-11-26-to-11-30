
PHP 序列化以及存储
	unserialize(string $str)
	从已存储的表示中创建 PHP 的值
	unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值。

	地址: http://php.net/manual/zh/function.unserialize.php

	返回的是转换之后的值，可为 integer、float、string、array 或 object。

	如果传递的字符串不可解序列化，则返回 FALSE，并产生一个 E_NOTICE。

	php version < 5.4 之前有bug 漏洞
		https://www.netentsec.com/support/show-loopholeupgrade-1524.html

	serialize() 产生一个可存储值的表示
	string serialize ( mixed $value )
	http://php.net/manual/zh/function.serialize.php


MySQL 开启远程连接注意事项
	
搜索词: linux mysql  启动远程连接
	https://jingyan.baidu.com/article/363872ec3263236e4ba16f07.html
	https://blog.csdn.net/qq_32600929/article/details/79682877

	Linux下mysql的远程连接

	1.登录数据库

	2.创建用户远程连接
	    GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;
	3.执行flush privileges;命令立即生效

	Linux启动与关闭mysql服务

	    service MySQL start；
	    service MySQL stop；
	--------------------- 
	作者：欧阳弘益 
	来源：CSDN 
	原文：https://blog.csdn.net/qq_32600929/article/details/79682877 
	版权声明：本文为博主原创文章，转载请附上博文链接！


	Can't connect to MySQL server on '163.53.16.5' (61)
	https://stackoverflow.com/questions/16161889/cant-connect-to-remote-mysql-server-with-error-61
	https://serverfault.com/questions/540571/cant-connect-to-mysql-server-error-61
	https://dba.stackexchange.com/questions/116130/cannot-connect-to-mysql-sever-with-mysql-workbench

	Can't connect to MySQL server on '' (61)

	http://www.cnblogs.com/xinjie10001/p/6279255.html

	linux 查看防火墙
	https://blog.csdn.net/qqllife/article/details/76355079
	https://www.jb51.net/article/136623.htm
	https://www.jb51.net/article/136624.htm

	Linux 将3306 添加到防火墙
	http://www.cnblogs.com/echo-something/archive/2012/07/31/3306_port.html
	https://docs.shenjian.io/use/publish/problems.html

	1.连接数据库的用户需要授权
	2.bind-address: 0.0.0.0
	3.检查防火墙或者将ip 添加为白名单
	重启服务器

	搜索技巧或者解决问题的思路; 计算思维
	遇到问题构建或者完善自己的知识体系，解决问题的方法，找到一条适于自己的思维方式
	

Python
	isinstance：python判断对象类型 或者检测变量的类型

	我们平时经常使用python的for循环，我们发现只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。

那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：

>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
>>> isinstance([1,2,3], Iterable) # list是否可迭代
True
>>> isinstance(123, Iterable) # 整数是否可迭代
False



当然也可以使用isinstance在数字运算的时候判断是否是数字，在字符操作的时候判断对象是否是字符
---------------------
作者：你所有承诺
来源：CSDN
原文：https://blog.csdn.net/stronglyh/article/details/72780210
版权声明：本文为博主原创文章，转载请附上博文链接！



python 对象类型判断


https://www.jb51.net/article/145009.htm
str为字符串s为字符串

str.isalnum() 所有字符都是数字或者字母

str.isalpha() 所有字符都是字母

str.isdigit() 所有字符都是数字

str.isspace() 所有字符都是空白字符、t、n、r

检查字符串是数字/浮点数方法

float部分

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
>> float('Nan')
nan
>> float('Nan')
nan
>> float('nan')
nan
>> float('INF')
inf
>> float('inf')
inf
>> float('-INF')
inf
>> float('-inf')
inf
第一种：最简单

?
1
2
3
4
5
6
7
8
9
10
11
12
def is_number(str):
  try:
    # 因为使用float有一个例外是'NaN'
    if str=='NaN':
      return False
    float(str)
    return True
  except ValueError:
    return False
float例外示例
 >>> float('NaN')
 nan
使用complex()

?
1
2
3
4
5
6
def is_number(s):
  try:
    complex(s) # for int, long, float and complex
  except ValueError:
    return False
  return True
综合1

?
1
2
3
4
5
6
7
8
9
def is_number(s):
  try:
    float(s) # for int, long and float
  except ValueError:
    try:
      complex(s) # for complex
    except ValueError:
      return False
  return True
综合2-还是无法完全识别

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
def is_number(n):
  is_number = True
  try:
    num = float(n)
    # 检查 "nan" 
    is_number = num == num  # 或者使用 `math.isnan(num)`
  except ValueError:
    is_number = False
  return is_number
>>> is_number('Nan')  
False
>>> is_number('nan') 
False
>>> is_number('123') 
True
>>> is_number('-123') 
True
>>> is_number('-1.12')
True
>>> is_number('abc') 
False
>>> is_number('inf') 
True
第二种：只能判断是整数

使用isnumeric()

?
1
2
3
4
5
# str必须是uniconde模式
>>> str = u"345"
>>> str.isnumeric()True
http://www.tutorialspoint.com/python/string_isnumeric.htm
http://docs.python.org/2/howt...
使用isdigit()

?
1
2
3
4
5
6
7
8
9
10
https://docs.python.org/2/lib...
>>> str = "11"
>>> print str.isdigit()
True
>>> str = "3.14"
>>> print str.isdigit()
False
>>> str = "aaa"
>>> print str.isdigit()
False
使用int()

?
1
2
3
4
5
6
def is_int(str):
  try:
    int(str)
    return True
  except ValueError:
    return False
第三种：使用正则(最安全方法)

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
import re
def is_number(num):
  pattern = re.compile(r'^[-+]?[-0-9]\d*\.\d*|[-+]?\.?[0-9]\d*$')
  result = pattern.match(num)
  if result:
    return True
  else:
    return False
>>>: is_number('1')
True
>>>: is_number('111')
True
>>>: is_number('11.1')
True
>>>: is_number('-11.1')
True
>>>: is_number('inf')
False
>>>: is_number('-inf')
False
总结

以上所述是小编给大家介绍的Python判断字符串是否为字母或者数字(浮点数)的多种方法，希望对大家有所帮助，如果大家有任何疑问请给我留言，小编会及时回复大家的。在此也非常感谢大家对脚本之家网站的支持！

您可能感兴趣的文章:
Python中字符串的修改及传参详解
python删除字符串中指定字符的方法
Python不使用int()函数把字符串转换为数字的方法
python 字符串和整数的转换方法
Python中修改字符串的四种方法



